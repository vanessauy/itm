{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ed5dbf21-6811-413b-ad4f-db2fa9f7480f",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Module 3: Individual Programming Assignment 1\n",
    "\n",
    "Thinking Like a Programmer\n",
    "\n",
    "This assignment covers your intermediate proficiency with Python.\n",
    "'''\n",
    "\n",
    "def shift_letter(letter, shift):\n",
    "    '''Shift Letter. \n",
    "    5 points.\n",
    "    \n",
    "    Shift a letter right by the given number.\n",
    "    Wrap the letter around if it reaches the end of the alphabet.\n",
    "\n",
    "    Examples:\n",
    "    shift_letter(\"A\", 0) -> \"A\"\n",
    "    shift_letter(\"A\", 2) -> \"C\"\n",
    "    shift_letter(\"Z\", 1) -> \"A\"\n",
    "    shift_letter(\"X\", 5) -> \"C\"\n",
    "    shift_letter(\" \", _) -> \" \"\n",
    "\n",
    "    *Note: the single underscore `_` is used to acknowledge the presence\n",
    "        of a value without caring about its contents.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    letter: str\n",
    "        a single uppercase English letter, or a space.\n",
    "    shift: int\n",
    "        the number by which to shift the letter. \n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        the letter, shifted appropriately, if a letter.\n",
    "        a single space if the original letter was a space.\n",
    "    '''\n",
    "    # Replace `pass` with your code. \n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "    \n",
    "    if letter == \" \":\n",
    "        return letter\n",
    "    else:\n",
    "        a_to_z_length = ord('Z') - ord('A') + 1\n",
    "        distance_from_A = ord(letter) + shift - ord('A') + 1\n",
    "        effective_distance_from_A = distance_from_A % a_to_z_length\n",
    "        letter_ascii_equivalent = ord('A') +  effective_distance_from_A - 1\n",
    "        return chr(letter_ascii_equivalent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c7174fd6-8627-4ada-9662-885628a1dd44",
   "metadata": {},
   "outputs": [],
   "source": [
    "def caesar_cipher(message, shift):\n",
    "    '''Caesar Cipher. \n",
    "    10 points.\n",
    "    \n",
    "    Apply a shift number to a string of uppercase English letters and spaces.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    message: str\n",
    "        a string of uppercase English letters and spaces.\n",
    "    shift: int\n",
    "        the number by which to shift the letters. \n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        the message, shifted appropriately.\n",
    "    '''\n",
    "    # Replace `pass` with your code. \n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "    \n",
    "    hidden_message = ''\n",
    "    \n",
    "    for char in message:\n",
    "        if char == \" \":\n",
    "            hidden_message += char\n",
    "        else:\n",
    "            a_to_z_length = ord('Z') - ord('A') + 1\n",
    "            distance_from_A = ord(char) + shift - ord('A') + 1\n",
    "            effective_distance_from_A = distance_from_A % a_to_z_length\n",
    "            \n",
    "            letter_ascii_equivalent = ord('A') +  effective_distance_from_A - 1\n",
    "            hidden_message += chr(letter_ascii_equivalent)\n",
    "        \n",
    "    return hidden_message"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd6ba4ad-3668-46ca-bc67-b0a5283f9faf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def shift_by_letter(letter, letter_shift):\n",
    "    '''Shift By Letter. \n",
    "    10 points.\n",
    "    \n",
    "    Shift a letter to the right using the number equivalent of another letter.\n",
    "    The shift letter is any letter from A to Z, where A represents 0, B represents 1, \n",
    "        ..., Z represents 25.\n",
    "\n",
    "    Examples:\n",
    "    shift_by_letter(\"A\", \"A\") -> \"A\"\n",
    "    shift_by_letter(\"A\", \"C\") -> \"C\"\n",
    "    shift_by_letter(\"B\", \"K\") -> \"L\"\n",
    "    shift_by_letter(\" \", _) -> \" \"\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    letter: str\n",
    "        a single uppercase English letter, or a space.\n",
    "    letter_shift: str\n",
    "        a single uppercase English letter.\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        the letter, shifted appropriately.\n",
    "    '''\n",
    "    # Replace `pass` with your code. \n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "    \n",
    "    if letter == \" \":\n",
    "        return letter\n",
    "    else:\n",
    "        a_to_z_length = ord('Z') - ord('A') + 1\n",
    "        index = ord(letter_shift) - ord('A') #convert letter to position\n",
    "        \n",
    "        distance_from_A = ord(letter) + index - ord('A') + 1\n",
    "        effective_distance_from_A = distance_from_A % a_to_z_length\n",
    "        \n",
    "        letter_ascii_equivalent = ord('A') +  effective_distance_from_A - 1\n",
    "        return chr(letter_ascii_equivalent)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7be3f996-d5b8-4142-92e1-9738399264d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def vigenere_cipher(message, key):\n",
    "    '''Vigenere Cipher. \n",
    "    15 points.\n",
    "    \n",
    "    Encrypts a message using a keyphrase instead of a static number.\n",
    "    Every letter in the message is shifted by the number represented by the \n",
    "        respective letter in the key.\n",
    "    Spaces should be ignored.\n",
    "\n",
    "    Example:\n",
    "    vigenere_cipher(\"A C\", \"KEY\") -> \"K A\"\n",
    "\n",
    "    If needed, the keyphrase is extended to match the length of the key.\n",
    "        If the key is \"KEY\" and the message is \"LONGTEXT\",\n",
    "        the key will be extended to be \"KEYKEYKE\".\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    message: str\n",
    "        a string of uppercase English letters and spaces.\n",
    "    key: str\n",
    "        a string of uppercase English letters. Will never be longer than the message.\n",
    "        Will never contain spaces.\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        the message, shifted appropriately.\n",
    "    '''\n",
    "    # Replace `pass` with your code. \n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "    \n",
    "    #extend the key (if applicable)\n",
    "   \n",
    "    key_frequency = len(message) // len(key)\n",
    "    \n",
    "    length_of_extra_characters = len(message) % len(key)\n",
    "   \n",
    "    extended_key = key * key_frequency + key[:length_of_extra_characters]\n",
    "    \n",
    "    hidden_message = ''\n",
    "    \n",
    "    for i in range(len(message)):\n",
    "        if message[i] == \" \":\n",
    "            hidden_message += message[i]\n",
    "        else:\n",
    "            a_to_z_length = ord('Z') - ord('A') + 1\n",
    "            index = ord(extended_key[i]) - ord('A') #convert letter to actual shift\n",
    "       \n",
    "            distance_from_A = ord(message[i]) + index - ord('A') + 1\n",
    "            effective_distance_from_A = distance_from_A % a_to_z_length\n",
    "        \n",
    "            letter_ascii_equivalent = ord('A') +  effective_distance_from_A - 1\n",
    "            hidden_message += chr(letter_ascii_equivalent)\n",
    "\n",
    "    return hidden_message"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "07cec770-0495-4078-a838-daf533008ca0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def scytale_cipher(message, shift):\n",
    "    '''Scytale Cipher.\n",
    "    15 points.\n",
    "    \n",
    "    Encrypts a message by simulating a scytale cipher.\n",
    "\n",
    "    A scytale is a cylinder around which you can wrap a long strip of \n",
    "        parchment that contained a string of apparent gibberish. The parchment, \n",
    "        when read using the scytale, would reveal a message due to every nth \n",
    "        letter now appearing next to each other, revealing a proper message.\n",
    "    This encryption method is obsolete and should never be used to encrypt\n",
    "        data in production settings.\n",
    "\n",
    "    You may read more about the method here:\n",
    "        https://en.wikipedia.org/wiki/Scytale\n",
    "\n",
    "    You may follow this algorithm to implement a scytale-style cipher:\n",
    "    1. Take a message to be encoded and a \"shift\" number. \n",
    "        For this example, we will use \"INFORMATION_AGE\" as \n",
    "        the message and 3 as the shift.\n",
    "    2. Check if the length of the message is a multiple of \n",
    "        the shift. If it is not, add additional underscores \n",
    "        to the end of the message until it is. \n",
    "        In this example, \"INFORMATION_AGE\" is already a multiple of 3, \n",
    "        so we will leave it alone.\n",
    "    3. This is the tricky part. Construct the encoded message. \n",
    "        For each index i in the encoded message, use the character at the index\n",
    "        (i // shift) + (len(message) // shift) * (i % shift) of the raw message. \n",
    "        If this number doesn't make sense, you can play around with the cipher at\n",
    "         https://dencode.com/en/cipher/scytale to try to understand it.\n",
    "    4. Return the encoded message. In this case, \n",
    "        the output should be \"IMNNA_FTAOIGROE\".\n",
    "\n",
    "    Example:\n",
    "    scytale_cipher(\"INFORMATION_AGE\", 3) -> \"IMNNA_FTAOIGROE\"\n",
    "    scytale_cipher(\"INFORMATION_AGE\", 4) -> \"IRIANMOGFANEOT__\"\n",
    "    scytale_cipher(\"ALGORITHMS_ARE_IMPORTANT\", 8) -> \"AOTSRIOALRH_EMRNGIMA_PTT\"\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    message: str\n",
    "        a string of uppercase English letters and underscores (underscores represent spaces)\n",
    "    shift: int\n",
    "        a positive int that does not exceed the length of message\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        the encoded message\n",
    "    '''\n",
    "    # Replace `pass` with your code. \n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "    \n",
    "    # Check if shift value is a multiple of the length of the message\n",
    "    # Otherwise, add underscores until it is already a multiple\n",
    "    \n",
    "    remainder = len(message) % shift\n",
    "    multiplier = shift - remainder\n",
    "    \n",
    "    #Add additional underscores to make it a multiple\n",
    "    extended_message = message if remainder == 0 else message + (multiplier * '_')\n",
    "   \n",
    "    hidden_message = ''    \n",
    "    \n",
    "    #For each index, apply the formula in item 3\n",
    "\n",
    "    for i in range(len(extended_message)):\n",
    "        char = extended_message[(i // shift) + (len(extended_message) // shift) * (i % shift)]\n",
    "        hidden_message += char\n",
    "        \n",
    "    return hidden_message    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
